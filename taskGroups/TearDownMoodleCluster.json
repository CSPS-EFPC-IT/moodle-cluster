{
  "tasks": [
    {
      "environment": {},
      "displayName": "Azure CLI - Delete Azure Resources from $(resourceGroupName)",
      "alwaysRun": false,
      "continueOnError": false,
      "condition": "succeeded()",
      "enabled": true,
      "timeoutInMinutes": 0,
      "inputs": {
        "connectedServiceNameARM": "$(serviceConnectionName)",
        "scriptType": "bash",
        "scriptLocation": "inlineScript",
        "scriptPath": "",
        "inlineScript": "echo \"Deleting all resources but the Key Vault, the User Assigned Managed Identity and the Application Gateway Public IP.\"\n\nredisIds=$(az redis list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$redisIds\" ]; then\n   echo \"Deleting Redis Service...\" \n   az redis delete --yes --ids $redisIds\nelse\n   echo \"No Redis Service found.\"\nfi\n\nvmIds=$(az vm list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$vmIds\" ]; then\n   echo \"Deleting Virtual Machine...\"\n   az vm delete --yes --ids $vmIds\nelse\n   echo \"No Virtual Machine Found.\"\nfi\n\ndiskIds=$(az disk  list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$diskIds\" ]; then\n   echo \"Deleting Disks...\"\n   az disk delete --yes --ids $diskIds\nelse\n   echo \"No Disk Found.\"\nfi\n\nnetworkInterfaceCardIds=$(az network nic list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$networkInterfaceCardIds\" ]; then\n   echo \"Deleting Network Interface Card...\"\n   az network nic delete --ids $networkInterfaceCardIds\nelse\n   echo \"No Network Interface Card Found.\"\nfi\n\nvmssIds=$(az vmss list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$vmssIds\" ]; then\n   echo \"Deleting Virtual Machine Scale Set...\" \n   az vmss delete --ids $vmssIds\nelse\n   echo \"No Virtual Machine Scale Set found.\"\nfi\n\npostgresIds=$(az postgres server list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$postgresIds\" ]; then\n   echo \"Deleting Postgres Server...\" \n   az postgres server delete --yes --ids $postgresIds\nelse\n   echo \"No Postgres Server found.\"\nfi\n\nimageIds=$(az image list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$imageIds\" ]; then\n   echo \"Deleting VM Image...\" \n   az image delete --ids $imageIds\nelse\n    echo \"No VM Image found.\"\nfi\n\nstorageAccountIds=$(az storage account list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$storageAccountIds\" ]; then\n   echo \"Deleting Storage Account...\" \n   az storage account delete --yes --ids $storageAccountIds\nelse\n   echo \"No Storage Account found.\"\nfi\n\nbastionName=$(az network bastion list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].name\" --output tsv)\nif [ ! -z \"$bastionName\" ]; then\n   echo \"Deleting Bastion...\" \n   az network bastion delete --subscription $(subscriptionId) --resource-group $(resourceGroupName) --name $bastionName\nelse\n    echo \"No Bastion found.\"\nfi\n\napplicationGatewayIds=$(az network application-gateway list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$applicationGatewayIds\" ]; then\n   echo \"Deleting Application Gateway...\" \n   az network application-gateway delete --ids $applicationGatewayIds\nelse\n   echo \"No Application Gateway found.\"\nfi\n\nvirtualNetworkIds=$(az network vnet list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$virtualNetworkIds\" ]; then\n   echo \"Deleting Virtual Network...\" \n   az network vnet delete --ids $virtualNetworkIds\nelse\n   echo \"No Virtual Network found.\"\nfi\n\nnetworkSecurityGroupIds=$(az network nsg list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$networkSecurityGroupIds\" ]; then\n   echo \"Deleting Network Security Groups...\" \n   az network nsg delete --ids $networkSecurityGroupIds\nelse\n   echo \"No Network Security Group found.\"\nfi\n\npublicIpIds=$(az network public-ip list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[?contains(name,'-BH-')].id\" --output tsv)\nif [ ! -z \"$publicIpIds\" ]; then\n   echo \"Deleting Public IPs...\"\n   az network public-ip delete --ids $publicIpIds\nelse\n   echo \"No Public IP found.\"\nfi\n\nrecoveryServiceVaultIds=$(az backup vault list --resource-group $(resourceGroupName) --subscription $(subscriptionId) --query \"[].id\" --output tsv)\nif [ ! -z \"$recoveryServiceVaultIds\" ]; then\n   echo \"Disabling Recovery Service Vault Soft Delete feature...\"\n   az backup vault backup-properties set --soft-delete-feature-state Disable --ids $recoveryServiceVaultIds\n\n   echo \"Deleting Recovery Service Vault...\"\n   az backup vault delete --force --yes --ids $recoveryServiceVaultIds\nelse\n   echo \"No Recovery Service Vault found.\"\nfi",
        "scriptArguments": "",
        "powerShellErrorActionPreference": "stop",
        "addSpnToEnvironment": "false",
        "useGlobalConfig": "false",
        "cwd": "",
        "failOnStandardError": "false",
        "powerShellIgnoreLASTEXITCODE": "false"
      },
      "task": {
        "id": "46e4be58-730b-4389-8a2f-ea10b3e5e815",
        "versionSpec": "2.*",
        "definitionType": "task"
      }
    }
  ],
  "runsOn": [
    "Agent",
    "DeploymentGroup"
  ],
  "revision": 12,
  "createdBy": {
    "displayName": "Patrick Messier",
    "id": "9d7984b5-5f92-6bd6-bfea-23da0d70f9a6",
    "uniqueName": "Patrick.Messier@csps-efpc.gc.ca"
  },
  "createdOn": "2020-10-22T12:26:18.833Z",
  "modifiedBy": {
    "displayName": "Patrick Messier",
    "id": "9d7984b5-5f92-6bd6-bfea-23da0d70f9a6",
    "uniqueName": "Patrick.Messier@csps-efpc.gc.ca"
  },
  "modifiedOn": "2021-01-05T20:41:44.493Z",
  "comment": "",
  "id": "7cd693c2-bfc9-4e54-a822-d69bbfd7f8ff",
  "name": "Tear Down Moodle Cluster",
  "version": {
    "major": 1,
    "minor": 0,
    "patch": 0,
    "isTest": false
  },
  "iconUrl": "https://cdn.vsassets.io/v/M176_20201020.1/_content/icon-meta-task.png",
  "friendlyName": "Tear Down Moodle Cluster",
  "description": "",
  "category": "Deploy",
  "definitionType": "metaTask",
  "author": "Patrick Messier",
  "demands": [],
  "groups": [],
  "inputs": [
    {
      "aliases": [],
      "options": {},
      "properties": {},
      "name": "resourceGroupName",
      "label": "resourceGroupName",
      "defaultValue": "$(resourceGroupName)",
      "required": true,
      "type": "string",
      "helpMarkDown": "",
      "groupName": ""
    },
    {
      "aliases": [],
      "options": {},
      "properties": {
        "EndpointFilterRule": ""
      },
      "name": "serviceConnectionName",
      "label": "serviceConnectionName",
      "defaultValue": "$(serviceConnectionName)",
      "required": true,
      "type": "connectedService:AzureRM",
      "helpMarkDown": "Select an Azure Resource Manager service connection for the deployment",
      "groupName": ""
    },
    {
      "aliases": [],
      "options": {},
      "properties": {},
      "name": "subscriptionId",
      "label": "subscriptionId",
      "defaultValue": "$(subscriptionId)",
      "required": true,
      "type": "string",
      "helpMarkDown": "",
      "groupName": ""
    }
  ],
  "satisfies": [],
  "sourceDefinitions": [],
  "dataSourceBindings": [],
  "instanceNameFormat": "Task group: Tear Down Moodle Cluster $(resourceGroupName)",
  "preJobExecution": {},
  "execution": {},
  "postJobExecution": {}
}